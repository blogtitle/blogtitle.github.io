<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog Title</title>
    <link>https://blogtitle.github.io/post/</link>
    <description>Recent content in Posts on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 May 2021 05:54:36 +0200</lastBuildDate><atom:link href="https://blogtitle.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Generics</title>
      <link>https://blogtitle.github.io/go-generics/</link>
      <pubDate>Fri, 07 May 2021 05:54:36 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/go-generics/</guid>
      <description>Preface Go doesn&amp;rsquo;t have generics yet, but there is a proposal that looks promising, and this post refers to that.
Here is a version of the playground you can use to try this proposal out if you want to experiment without installing any tools.
Functions Converting a slice into a channel. This is not necessarily the most useful function but it&amp;rsquo;s a good and simple example:
func chanFromSlice[T any](in []T) chan T { c := make(chan T, len(in)) for _, v := range in { c &amp;lt;- v } return c } Here you can see that this looks and feels like Go, with the only difference of the [T any] bit.</description>
    </item>
    
    <item>
      <title>Go Safe HTML</title>
      <link>https://blogtitle.github.io/go-safe-html/</link>
      <pubDate>Tue, 30 Jun 2020 13:03:31 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/go-safe-html/</guid>
      <description>Disclaimer: this is not an official Google post or communication, it is just me commenting on something that is now available.
 The Google infosec team just released the Go &amp;ldquo;safehtml&amp;rdquo; package. If you are interested in making your application resilient to server-side XSS you might want to adopt it instead of &amp;ldquo;html/template&amp;rdquo;. Migration to safehtml should be quite straightforward as it is just a hardened fork of the original html/template standard package.</description>
    </item>
    
    <item>
      <title>I Am Switching to JS</title>
      <link>https://blogtitle.github.io/i-am-switching-to-js/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0300</pubDate>
      
      <guid>https://blogtitle.github.io/i-am-switching-to-js/</guid>
      <description>After 5 years of using Go I am finally moving on. Go has served me well and has been the best language I could have possibly used for the longest time, but it is now the moment for me to let it Go.
Over time Go has not failed to show me its limitations and its issues, to the point where I decided to switch to something more future proof and with a more thriving community.</description>
    </item>
    
    <item>
      <title>Sneaky race conditions and granular locks</title>
      <link>https://blogtitle.github.io/sneaky-race-conditions-and-granular-locks/</link>
      <pubDate>Wed, 11 Dec 2019 09:33:58 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/sneaky-race-conditions-and-granular-locks/</guid>
      <description>Race conditions are the main problem you have to care about when writing concurrent code. Go provides high level primitives that make it easier to get concurrency and parallelism right, but those are often times not enough.
This is one of the reasons why Go has a race detector. You should always run your tests and, where possible, a portion of your production fleet with -race enabled. Beware that this might still not be enough: the detector only triggers when a race manifests and not all races are detected by it.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 3 (channels)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-3-channels/</link>
      <pubDate>Thu, 05 Dec 2019 20:07:04 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-3-channels/</guid>
      <description>Today I&amp;rsquo;m going to dive into the expressive power of Go channels and the select statement. To demonstrate how much can be implemented with just those two primitives I will rewrite the sync package from scratch.
In doing so I&amp;rsquo;m just going to accept some compromises:
 This post is about expressive power, not speed. The examples will correctly express the primitives but might not be as fast as the real ones.</description>
    </item>
    
    <item>
      <title>Rob&#39;n Go security pearls: Cross Site Scripting (XSS)</title>
      <link>https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/</link>
      <pubDate>Wed, 11 Sep 2019 23:23:40 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/</guid>
      <description>This post is part of my developer-friendly security series. You can find all other posts here.
 XSS is a vulnerability that allows attackers to run arbitrary JavaScript code in applications they shouldn&amp;rsquo;t be able to control. This can lead to complete account compromises for every victim that follows a malicious link or visits a compromised page.
There are two major families of XSS: server side and client side. Today we&amp;rsquo;ll discover how to better protect against server-side XSS, how to reduce the risk of client-side XSS (with some novel technologies) and how to mitigate both of them with some defense-in-depth mechanisms.</description>
    </item>
    
    <item>
      <title>Rob&#39;n Go security pearls: fundamentals</title>
      <link>https://blogtitle.github.io/robn-go-security-pearls-fundamentals/</link>
      <pubDate>Thu, 05 Sep 2019 12:25:40 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/robn-go-security-pearls-fundamentals/</guid>
      <description>Welcome to this introductory series on web security. I&amp;rsquo;ll use simple snippets and hands-on examples to introduce fundamentals on the topic. Most server-side code will be in Go but you&amp;rsquo;ll be able to understand it if you know any C-like language.
This first post is about the fundamentals: URI, HTTP, TLS, HTML, escaping and cookies. If you are already familiar with those concepts please feel free to skip to the next post.</description>
    </item>
    
    <item>
      <title>Using JavaScript SharedArrayBuffers and Atomics</title>
      <link>https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/</link>
      <pubDate>Fri, 22 Mar 2019 12:42:05 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/</guid>
      <description>I&amp;rsquo;m not a big fan of JavaScript but I like parallel programming and JS has some interesting concepts of it.
In addition to the event loop I&amp;rsquo;ve recently got to know the concept of Web Workers. They are real threads that execute in parallel with the main thread, and are allowed to wait and block as much as they want.
Modern devices are going in the direction of having a lot of FPS and web developers want to maintain the user experience smooth.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 2 (timers)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</link>
      <pubDate>Mon, 25 Feb 2019 22:56:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</guid>
      <description>As I stated in my previous article timers are hard to use the right way so here are some handful tips.
Preface If you don&amp;rsquo;t think dealing with time and timers while also juggling goroutines is hard, here are some juicy bugs related to time.Timer:
 time: Timer.Reset is not possible to use correctly #14038 time: Timer.C can still trigger even after Timer.Reset is called #11513 time: document proper usage of Timer.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 1</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</link>
      <pubDate>Sat, 23 Feb 2019 09:47:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</guid>
      <description>Writing code is hard. Writing code that has to deal with parallelism and concurrency is harder. Doing all of that an keeping it efficient is challenging.
Today I decided to start sharing a couple of tricks to handle some peculiar cases.
Timed channels operations Sometimes you want to time your channels operations: keep trying to do something, and if you can&amp;rsquo;t do it in time just drop the ball.
To do so you can either use context or time, both are fine.</description>
    </item>
    
  </channel>
</rss>
