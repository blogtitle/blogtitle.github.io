<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog Title</title>
    <link>https://blogtitle.github.io/post/</link>
    <description>Recent content in Posts on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2019 07:45:23 +0200</lastBuildDate>
    
	<atom:link href="https://blogtitle.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How and Why I&#39;ll use `try` in Go</title>
      <link>https://blogtitle.github.io/how-and-why-ill-use-try-in-go/</link>
      <pubDate>Sat, 29 Jun 2019 07:45:23 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/how-and-why-ill-use-try-in-go/</guid>
      <description>I will not, and neither should you.
Reading
if err := doSmth(); err != nil { return err } Is just so much less magical than reading
try(doSmth()) And, anyways, the best way would be to write
if err := doSmth(); err != nil { return fmt.Errorf(&amp;#34;fizzing the buzz: %v&amp;#34;, err) } If you are really concerned about writing speed and use vim-go you can always add this to your vimrc:</description>
    </item>
    
    <item>
      <title>Using JavaScript SharedArrayBuffers and Atomics</title>
      <link>https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/</link>
      <pubDate>Fri, 22 Mar 2019 12:42:05 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/</guid>
      <description>I&amp;rsquo;m not a big fan of JavaScript but I like parallel programming and JS has some interesting concepts of it.
In addition to the event loop I&amp;rsquo;ve recently got to know the concept of Web Workers. They are real threads that execute in parallel with the main thread, and are allowed to wait and block as much as they want.
Modern devices are going in the direction of having a lot of FPS and web developers want to maintain the user experience smooth.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 2 (timers)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</link>
      <pubDate>Mon, 25 Feb 2019 22:56:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</guid>
      <description>As I stated in my previous article timers are hard to use the right way so here are some handful tips.
Preface If you don&amp;rsquo;t think dealing with time and timers while also juggling goroutines is hard, here are some juicy bugs related to time.Timer:
 time: Timer.Reset is not possible to use correctly #14038 time: Timer.C can still trigger even after Timer.Reset is called #11513 time: document proper usage of Timer.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 1</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</link>
      <pubDate>Sat, 23 Feb 2019 09:47:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</guid>
      <description>Writing code is hard. Writing code that has to deal with parallelism and concurrency is harder. Doing all of that an keeping it efficient is challenging.
Today I decided to start sharing a couple of tricks to handle some peculiar cases.
Timed channels operations Sometimes you want to time your channels operations: keep trying to do something, and if you can&amp;rsquo;t do it in time just drop the ball.</description>
    </item>
    
    <item>
      <title>Go: slices gotchas</title>
      <link>https://blogtitle.github.io/go-slices-gotchas/</link>
      <pubDate>Fri, 22 Feb 2019 21:12:56 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-slices-gotchas/</guid>
      <description>Preface One of the features that I love the most about Go is the fact that it is unsurprising. One could even say that it is boring in some sense. This is a good trait of a programming language. When you code you should focus on the problem at hand, and not on what your language is doing that you don&amp;rsquo;t want.
This article talks about one of the most &amp;ldquo;surprising&amp;rdquo; features of Go for newcomers: slices.</description>
    </item>
    
    <item>
      <title>A (un)biased story</title>
      <link>https://blogtitle.github.io/a-unbiased-story/</link>
      <pubDate>Tue, 19 Feb 2019 12:07:43 -0800</pubDate>
      
      <guid>https://blogtitle.github.io/a-unbiased-story/</guid>
      <description>I want to tell you a story somebody shared with me. Nobody knows where the story comes from, or who invented it, but now it&amp;rsquo;s widely used as an exercise to improve communication skills. I changed the names of the characters in order to be gender neutral, so, please, bear with me as some sentences are bulky.
Once upon a time, a long long time ago, there was a town. The town was cut in two halves by a large river.</description>
    </item>
    
    <item>
      <title>Some useful patterns</title>
      <link>https://blogtitle.github.io/some-useful-patterns/</link>
      <pubDate>Tue, 19 Feb 2019 08:37:12 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/some-useful-patterns/</guid>
      <description>Coming from a VB.Net, Java, C# and Python background, when I first started using Go I was very annoyed by the lack of some patterns on a language level. It took me a while using the language to find out those patterns can be easily expressed.
Here is a collection of some common patterns and the best way I&amp;rsquo;ve found to express them.
Decorators This feature is extensively used in most object oriented languages, and consists in somehow taking a function or method and enrich it with other effects or properties.</description>
    </item>
    
    <item>
      <title>Go advanced benchmarking</title>
      <link>https://blogtitle.github.io/go-advanced-benchmarking/</link>
      <pubDate>Fri, 11 Jan 2019 22:15:43 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-benchmarking/</guid>
      <description>The story Sometimes you have to solve a problem that comes in several flavours. Usually complicated problems do not offer a single solution, but there are several solutions that are optimal or terrible depending on which subset of that problem the program will have to solve at runtime.
One example I faced was to analyse some data flowing in some connections that I was proxying.
There are two main ways to extract some information from traffic: you can either record the entire traffic to analyse it as soon as it is done, or you can analyse it while it flows(with a buffer window) at the cost of slowing it down.</description>
    </item>
    
    <item>
      <title>The Hidden Pri(c|s)e of Research</title>
      <link>https://blogtitle.github.io/the-hidden-pricse-of-research/</link>
      <pubDate>Fri, 19 Oct 2018 15:42:57 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/the-hidden-pricse-of-research/</guid>
      <description>You wake up one Sunday morning and think: &amp;ldquo;how the hell does that thing work?&amp;rdquo;. So you go and google for it and find several blog posts, talks and papers about the topic. During your research you find out some more detailed parts of the topic, so you search the web for it again and find out more. After several hours you find out something very interesting, many layers deeper than where you started, something that you can&amp;rsquo;t really grasp because it is too complex or requires some background knowledge that the speaker/researcher/blogger couldn&amp;rsquo;t possibly fit in the talk/paper/post.</description>
    </item>
    
    <item>
      <title>Regexp Fun</title>
      <link>https://blogtitle.github.io/regexp-fun/</link>
      <pubDate>Wed, 12 Sep 2018 19:57:02 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/regexp-fun/</guid>
      <description>Preface I love using regular expressions. They are such a powerful tool, they are complex, concise, complex, expressive, complex, broadly supported, complex and easy to write.
They are the perfect tool if you want to write a simple script and you need to elaborate text. Some downsides are that they are complex, surprising, and very inefficient compared with simpler string manipulations primitives (e.g contains, hasPrefix, trim, replace,&amp;hellip;)
Regular The &amp;ldquo;reg&amp;rdquo; in &amp;ldquo;regexp&amp;rdquo; stands for regular.</description>
    </item>
    
  </channel>
</rss>