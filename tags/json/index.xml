<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on Blog Title</title>
    <link>https://blogtitle.github.io/tags/json/</link>
    <description>Recent content in JSON on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 May 2018 16:35:28 -0700</lastBuildDate>
    
        <atom:link href="https://blogtitle.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Unmarshaling JSON in Golang</title>
      <link>https://blogtitle.github.io/unmarshaling-json-in-golang/</link>
      <pubDate>Wed, 30 May 2018 16:35:28 -0700</pubDate>
      
      <guid>https://blogtitle.github.io/unmarshaling-json-in-golang/</guid>
      <description>Unmarshaling JSON files in Golang can be tricky. Golang is a statically typed language and does not allow dynamic JSON deserialization. In order to unmarshal a JSON blob into Golang it usually requires to know its structure beforehand. But, as the internal documentation states, it is possible to unmarshal JSON into an empty interface.
An empty interface represents the empty set of methods and is satisfied by any value, since any value has zero or more methods.</description>
    </item>
    
    
  </channel>
</rss>
