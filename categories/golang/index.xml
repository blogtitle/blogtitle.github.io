<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Blog Title</title>
    <link>https://blogtitle.github.io/categories/golang/</link>
    <description>Recent content in Golang on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Aug 2018 12:34:41 +0200</lastBuildDate>
    
	<atom:link href="https://blogtitle.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Considerations on error handling</title>
      <link>https://blogtitle.github.io/considerations-on-error-handling/</link>
      <pubDate>Fri, 10 Aug 2018 12:34:41 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/considerations-on-error-handling/</guid>
      <description>The impact The first language I used to build something more than just school exercises was VisualBasic.Net. There are some good things and bad things in it, but I don&amp;rsquo;t want to discuss that today. I switched to C# after that and Java and Python after it.
This is to say that basically up until three years ago I knew one and only one way to handle errors which is expressed in the following pseudocode:</description>
    </item>
    
    <item>
      <title>Unmarshaling JSON in Golang</title>
      <link>https://blogtitle.github.io/unmarshaling-json-in-golang/</link>
      <pubDate>Wed, 30 May 2018 16:35:28 -0700</pubDate>
      
      <guid>https://blogtitle.github.io/unmarshaling-json-in-golang/</guid>
      <description>Unmarshaling JSON files in Golang can be tricky. Golang is a statically typed language and does not allow dynamic JSON deserialization. In order to unmarshal a JSON blob into Golang it usually requires to know its structure beforehand. But, as the internal documentation states, it is possible to unmarshal JSON into an empty interface.
An empty interface represents the empty set of methods and is satisfied by any value, since any value has zero or more methods.</description>
    </item>
    
  </channel>
</rss>