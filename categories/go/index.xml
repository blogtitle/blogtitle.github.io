<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Blog Title</title>
    <link>https://blogtitle.github.io/categories/go/</link>
    <description>Recent content in Go on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2024 22:19:23 +0100</lastBuildDate>
    
	<atom:link href="https://blogtitle.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go advanced concurrency patterns: part 4 (unlimited buffer channels)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-4-unlimited-buffer-channels/</link>
      <pubDate>Mon, 16 Dec 2024 22:19:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-4-unlimited-buffer-channels/</guid>
      <description>Preface It&amp;rsquo;s been almost 6 years since I added to this series, but I thought it was time to resume working on it.
Since &amp;ldquo;perfect is the opposite of done&amp;rdquo; I thought I would talk about a simple pattern that I haven&amp;rsquo;t covered yet.
A couple of years ago I worked on a toy library to see if the new-ish generics proposal would finally allow to express some of the most common channel patterns in Go.</description>
    </item>
    
    <item>
      <title>Let&#39;s Go to Go2</title>
      <link>https://blogtitle.github.io/lets-go-to-go2/</link>
      <pubDate>Fri, 07 May 2021 09:04:30 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/lets-go-to-go2/</guid>
      <description>Preface In my previous post I summarized the latest generics proposal for Go.
In this post I&amp;rsquo;m gonna use it a bit, and misuse it a lot.
The problem Sometimes I find myself writing code to run the same function in parallel with itself with different inputs, for example to process a batch of data.
This is not super complicated code, but it&amp;rsquo;s not exactly straightforward and can sometimes be tricky to get right.</description>
    </item>
    
    <item>
      <title>Go Generics</title>
      <link>https://blogtitle.github.io/go-generics/</link>
      <pubDate>Fri, 07 May 2021 05:54:36 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/go-generics/</guid>
      <description>Preface Go doesn&amp;rsquo;t have generics yet, but there is a proposal that looks promising, and this post refers to that.
Here is a version of the playground you can use to try this proposal out if you want to experiment without installing any tools.
Functions Converting a slice into a channel. This is not necessarily the most useful function but it&amp;rsquo;s a good and simple example:
func chanFromSlice[T any](in []T) chan T { c := make(chan T, len(in)) for _, v := range in { c &amp;lt;- v } return c } Here you can see that this looks and feels like Go, with the only difference of the [T any] bit.</description>
    </item>
    
    <item>
      <title>Go Safe HTML</title>
      <link>https://blogtitle.github.io/go-safe-html/</link>
      <pubDate>Tue, 30 Jun 2020 13:03:31 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/go-safe-html/</guid>
      <description>Disclaimer: this is not an official Google post or communication, it is just me commenting on something that is now available.
 The Google infosec team just released the Go &amp;ldquo;safehtml&amp;rdquo; package. If you are interested in making your application resilient to server-side XSS you might want to adopt it instead of &amp;ldquo;html/template&amp;rdquo;. Migration to safehtml should be quite straightforward as it is just a hardened fork of the original html/template standard package.</description>
    </item>
    
    <item>
      <title>Sneaky race conditions and granular locks</title>
      <link>https://blogtitle.github.io/sneaky-race-conditions-and-granular-locks/</link>
      <pubDate>Wed, 11 Dec 2019 09:33:58 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/sneaky-race-conditions-and-granular-locks/</guid>
      <description>Race conditions are the main problem you have to care about when writing concurrent code. Go provides high level primitives that make it easier to get concurrency and parallelism right, but those are often times not enough.
This is one of the reasons why Go has a race detector. You should always run your tests and, where possible, a portion of your production fleet with -race enabled. Beware that this might still not be enough: the detector only triggers when a race manifests and not all races are detected by it.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 3 (channels)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-3-channels/</link>
      <pubDate>Thu, 05 Dec 2019 20:07:04 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-3-channels/</guid>
      <description>Edit (16 Dec 2024) This post is still here for historical reasons, but it&amp;rsquo;s now quite old.
The sync package has evolved since then and some primitives have become available.
While all the channel and select semantics have stayed the same, please consider this as a post on how to better understand channels semantics rather than documentation or replacement for the sync package.
Previous Post Today I&amp;rsquo;m going to dive into the expressive power of Go channels and the select statement.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 2 (timers)</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</link>
      <pubDate>Mon, 25 Feb 2019 22:56:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-2-timers/</guid>
      <description>As I stated in my previous article timers are hard to use the right way so here are some handful tips.
Edit (16 Dec 2024) This post is still here for historical reasons, but it&amp;rsquo;s now quite old.
Many of the issues in this post have been corrected and some footguns don&amp;rsquo;t hold true anymore.
Please consider this as a window into a &amp;ldquo;previous Go experience&amp;rdquo; and nothing more.</description>
    </item>
    
    <item>
      <title>Go advanced concurrency patterns: part 1</title>
      <link>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</link>
      <pubDate>Sat, 23 Feb 2019 09:47:23 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-concurrency-patterns-part-1/</guid>
      <description>Writing code is hard. Writing code that has to deal with parallelism and concurrency is harder. Doing all of that an keeping it efficient is challenging.
Today I decided to start sharing a couple of tricks to handle some peculiar cases.
Timed channels operations Sometimes you want to time your channels operations: keep trying to do something, and if you can&amp;rsquo;t do it in time just drop the ball.</description>
    </item>
    
    <item>
      <title>Go: slices gotchas</title>
      <link>https://blogtitle.github.io/go-slices-gotchas/</link>
      <pubDate>Fri, 22 Feb 2019 21:12:56 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-slices-gotchas/</guid>
      <description>Preface One of the features that I love the most about Go is the fact that it is unsurprising. One could even say that it is boring in some sense. This is a good trait of a programming language. When you code you should focus on the problem at hand, and not on what your language is doing that you don&amp;rsquo;t want.
This article talks about one of the most &amp;ldquo;surprising&amp;rdquo; features of Go for newcomers: slices.</description>
    </item>
    
    <item>
      <title>Some useful patterns</title>
      <link>https://blogtitle.github.io/some-useful-patterns/</link>
      <pubDate>Tue, 19 Feb 2019 08:37:12 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/some-useful-patterns/</guid>
      <description>Coming from a VB.Net, Java, C# and Python background, when I first started using Go I was very annoyed by the lack of some patterns on a language level. It took me a while using the language to find out those patterns can be easily expressed.
Here is a collection of some common patterns and the best way I&amp;rsquo;ve found to express them.
Decorators This feature is extensively used in most object oriented languages, and consists in somehow taking a function or method and enrich it with other effects or properties.</description>
    </item>
    
  </channel>
</rss>