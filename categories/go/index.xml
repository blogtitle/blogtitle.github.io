<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Blog Title</title>
    <link>https://blogtitle.github.io/categories/go/</link>
    <description>Recent content in Go on Blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Feb 2019 21:12:56 +0100</lastBuildDate>
    
	<atom:link href="https://blogtitle.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go: slices gotchas</title>
      <link>https://blogtitle.github.io/go-slices-gotchas/</link>
      <pubDate>Fri, 22 Feb 2019 21:12:56 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-slices-gotchas/</guid>
      <description>Preface One of the features that I love the most about Go is the fact that it is unsurprising. One could even say that it is boring in some sense. This is a good trait of a programming language. When you code you should focus on the problem at hand, and not on what your language is doing that you don&amp;rsquo;t want.
This article talks about one of the most &amp;ldquo;surprising&amp;rdquo; features of Go for newcomers: slices.</description>
    </item>
    
    <item>
      <title>Go Advanced Benchmarking</title>
      <link>https://blogtitle.github.io/go-advanced-benchmarking/</link>
      <pubDate>Fri, 11 Jan 2019 22:15:43 +0100</pubDate>
      
      <guid>https://blogtitle.github.io/go-advanced-benchmarking/</guid>
      <description>The story Sometimes you have to solve a problem that comes in several flavours. Usually complicated problems do not offer a single solution, but there are several solutions that are optimal or terrible depending on which subset of that problem the program will have to solve at runtime.
One example I faced was to analyse some data flowing in some connections that I was proxying.
There are two main ways to extract some information from traffic: you can either record the entire traffic to analyse it as soon as it is done, or you can analyse it while it flows(with a buffer window) at the cost of slowing it down.</description>
    </item>
    
    <item>
      <title>Considerations on error handling</title>
      <link>https://blogtitle.github.io/considerations-on-error-handling/</link>
      <pubDate>Fri, 10 Aug 2018 12:34:41 +0200</pubDate>
      
      <guid>https://blogtitle.github.io/considerations-on-error-handling/</guid>
      <description>The impact The first language I used to build something more than just school exercises was VisualBasic.Net. There are some good things and bad things in it, but I don&amp;rsquo;t want to discuss that today. I switched to C# after that and Java and Python after it.
This is to say that basically up until three years ago I knew one and only one way to handle errors which is expressed in the following pseudocode:</description>
    </item>
    
    <item>
      <title>Unmarshaling JSON in Golang</title>
      <link>https://blogtitle.github.io/unmarshaling-json-in-golang/</link>
      <pubDate>Wed, 30 May 2018 16:35:28 -0700</pubDate>
      
      <guid>https://blogtitle.github.io/unmarshaling-json-in-golang/</guid>
      <description>Unmarshaling JSON files in Golang can be tricky. Golang is a statically typed language and does not allow dynamic JSON deserialization. In order to unmarshal a JSON blob into Golang it usually requires to know its structure beforehand. But, as the internal documentation states, it is possible to unmarshal JSON into an empty interface.
An empty interface represents the empty set of methods and is satisfied by any value, since any value has zero or more methods.</description>
    </item>
    
  </channel>
</rss>